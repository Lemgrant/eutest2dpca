/*
https://lemgrant.github.io/eutest2dpca/
https://github.com/Lemgrant/
*/
var vm = new Vue({
  el: '#app',
  data: {
    inputValue: '',
    inputHasError: false,
    currentPCA: 0,
    pcaData: [
      { 
        name: 'Europe PCA',
        mlpca: {},
        mlpcaS: [17.8423601218314,11.0449704918778,5.92294767783693,4.56639728504621,2.70636476783204,1.7991348288303,1.24327587113241,1.01659021408207,0.2683454400445,0.247793118542484,0.189134645365328,0.106227964295391,0.00335816140810441],
        mlpcaUdata: [
          [0.460967996519683,0.286505347415834,-0.232201345831601,-0.65201239890141,-0.174518105549786,-0.0131787226125986,-0.052661031538593,0.295697849833468,-0.130924557309127,-0.0946161250698974,-0.0103184538025124,-0.0451363523997343,0.278042616517132],
          [0.492904194999276,0.245228198885789,-0.136910338594635,0.373319813687735,0.0305582811106584,-0.0290411931408301,0.307582464589543,-0.574204747598515,-0.16782982068295,-0.0501890493486045,0.0583052194277547,-0.0395941518134427,0.277575596785703],
          [0.186201500463789,-0.422838848172712,0.378504093876576,-0.215106703570562,0.696638522967799,0.00862849279458788,0.0823640680201215,0.0150897544583857,-0.144766442506176,-0.0647633128760477,-0.00388872062150308,-0.0456032902617614,0.278141064814673],
          [0.0415095181009961,-0.639213518662462,0.164134206093292,-0.00408502624666869,-0.657059780484006,-0.0226222791207171,0.144844549352837,-0.0462891119518338,-0.148270769923037,-0.0780030885479306,0.0166812729985194,-0.0436402101622546,0.27769214710467],
          [-0.38295948005176,-0.261586687118967,-0.774361706795332,-0.0366934152815404,0.2082741183912,-0.176296977248343,-0.00321332316875246,-0.0754106028630451,-0.136043603271862,-0.075083342279882,0.0230180305451945,-0.0433654621507819,0.277885591060925],
          [-0.544258238633584,0.369625846116655,0.253982226149576,-0.201183069048309,-0.0451977025591266,0.0620763040469702,0.600076970506523,-0.00785654607170594,-0.118300446963092,-0.0495413947053186,0.00295620461774477,-0.0499342969861026,0.277806030710193],
          [-0.154307774536177,0.209659286826247,0.294722532151309,0.0455743808353922,-0.0547733635508724,-0.706772516007577,-0.472513484768839,-0.117517957625208,-0.125442336776429,-0.0635038594027968,0.0767492735099834,-0.0296159211163837,0.277760059844791],
          [-0.186265923571585,0.115793444815785,0.0750965008028763,0.0405324816066596,-0.0334319387899238,0.665448159166027,-0.529356278551175,-0.198692603049316,-0.255930156661211,-0.184974360601605,-0.053073504952834,-0.0318609165916437,0.2782643995129],
          [0.0127344437453773,0.00248844025254903,0.00528788044901492,0.0466912096957231,0.00645511592165451,0.0178224644874569,-0.00214028725382688,-0.0125191959429724,0.781710997250571,-0.54444831222875,-0.0914604084971636,-0.072133033827658,0.275751268725436],
          [-0.00907166924839412,0.000431063547141749,-0.000330340223474053,0.00245156923394723,-0.002949755000979,0.13696281430765,-0.0728309801209186,0.0330388903647251,0.31228055865996,0.519208446896726,0.667277415650256,-0.292952667965289,0.276714640802753],
          [0.00311515234378022,0.00694865031743465,-0.00434996617621972,0.0166555192337789,-0.015833718773083,-0.00479233111330629,-0.0501319990719019,-0.0432414630574219,0.194543271509951,0.567881231357675,-0.726198601701894,-0.170553535796384,0.279642403629074],
          [0.0807670654489774,0.0889727635636412,-0.0208228859954951,0.584140498652082,0.0416711385798276,0.0242706976925694,0.0579642381861991,0.719863369848897,-0.184340578821326,-0.0768159864642651,-0.0247375616961352,-0.0459366625755356,0.278233481659337],
          [-0.00124913756346233,-0.00209486283767717,-0.00287095037981019,0.000137967759088358,-0.000720324505298841,0.0377556934925658,-0.00918141676950524,0.0110547605980707,0.132633784446556,0.193697709449087,0.0731731867671717,0.929473797864925,0.271968551137866]
        ],
        mlpcaMeans: [17.44705247,14.48814815,18.29257716,17.46682099,11.90743827,10.05223765,5.706373457,2.553811728,0.382314815,0.150432099,0.122592593,1.367777778,0.061929012],
        mlpcaCenter: true,
        mlpcaScale: false,
        x: 0,
        y: 1,
        flipX: 1,
        flipY: -1,
        tracesCount: 0,
        traces: [
          {
            text: ['Ashkenazi_Jew','Austrian','Belorussian','Cornish','Danish','East_Finnish','East_Russian','Estonian','English','Erzya','Spanish','French','French_Basque','Greek','Hungarian','Irish','Komi','Lithuanian','Dutch','Norwegian','North_Italian','North_Russian','North_Swedish','Northwest_Russian','Orcadian','Polish','Portuguese','Romanian','Sardinian','Scottish','Serbian','South_&_Central_Swedish','South_Finnish','South_Italian_&_Sicilian','Tuscan','Ukrainian','Udmurt','Ukrainian-Russian','West_&_Central_German','West_Russian','Greek_Crete_1','Greek_Chios_1','Maltese_1','SerbianBosnia','UA_Sumy','Czech','Croatian','Bulgarian_1','Kosovar_1','Albanian_1','Moldavian_1','Slovakian_1','Slovenian_1','Cypriot'],

            x: [-25.67911137,0.348096875,19.17730637,1.885123201,6.594185961,21.12893206,18.97479716,22.1794596,2.390151749,21.18135008,-14.680334,-7.323273365,-11.964391,-29.92972076,1.723575681,4.525602897,19.90924344,23.52964186,2.892794767,9.415085231,-17.90740665,22.05404835,13.09469392,21.52712751,4.770042015,14.62902306,-14.71016315,-7.487371523,-36.46121398,5.041516506,-4.462564315,10.06338675,19.01174294,-30.45531592,-23.69824977,14.2672061,19.74137742,15.70266641,2.299074196,16.66461571,-29.79810027,-30.59184162,-29.77798943,0.172589622,15.35265176,8.219011654,4.715938012,-9.601560711,-17.86454798,-16.59058547,0.370114732,9.176236385,4.222111844,-37.96678055],
            y: [11.01641575,-3.681983817,7.225076272,-16.74987965,-14.61114699,3.912054156,8.383993973,3.378520127,-16.03816325,10.95893889,-14.82104752,-14.39327315,-28.70598122,12.39145122,1.954845289,-17.49933875,11.89157538,7.966246839,-13.4802707,-13.51194381,-4.953413153,9.321009188,-8.78919697,8.884263259,-16.66447239,4.749076776,-12.48625622,6.50321041,-13.40469112,-18.36609713,4.829127982,-12.36733526,-1.389306396,8.136719061,-2.639069239,7.060946578,11.4340234,8.908390563,-11.5854558,6.753718528,12.86573665,13.60085803,7.18759475,5.452095494,7.191030956,0.989607992,2.910176639,5.542181485,4.550897295,5.514207242,7.751200149,4.46061073,2.71474764,19.74777383],
            mode: 'markers+text',
            type: 'scatter',
            name: 'Europe',
            marker: { size: 3, symbol: 1 }
          },
          
        ],
        initialLayout: '',
        layout: {
		paper_bgcolor: '#787c8a',
  plot_bgcolor: '#ebecef',
		margin: {
    l: 0,
    r: 0,
    b: 0,
    t: 60,
    
  },
          xaxis: {
            zeroline: false
          },
		  font: {
    family: 'Arial',
    size: 11,
    color: '#000'
  },
          yaxis: {
            zeroline: false
          },
          hovermode: 'closest',
          dragmode: 'pan',
          title: 'Eurogenes EUtest Europe PCA by Lemgrant'
        }
      },
      
      
      
    ]
  },
  methods: {
    plotPCA: function (index) {
      this.currentPCA = index;
      Plotly.newPlot('graphDiv', this.pcaData[index].traces , this.pcaData[index].layout, {showSendToCloud: false, responsive: true});
    },
    addtrace: function () {
      this.inputValue = this.inputValue.replace(/[^\S]/g, '').replace(/\"/g,'').replace(/\</g, '&lt;').replace(/\>/g, '&gt;');
      let i, input = this.inputValue.split(","), hasNumbers = true, inputName, predicted;
      const inputLen = input.length,  dataset = [], currentPcaData = this.pcaData[this.currentPCA];
      for (i = 1; i < inputLen; i++) {
        input[i] = Number(input[i]);
        if (isNaN(input[i])) {
          hasNumbers = false;
        }
      };
      if (inputLen == 14 && hasNumbers) {
        inputName = input[0];
        input.shift();
        dataset[0] = input;
        predicted = currentPcaData.mlpca.predict(dataset);
        Plotly.addTraces(graphDiv, {x: [Number((predicted.data[0][currentPcaData.x] * currentPcaData.flipX).toFixed(6))], y: [Number((predicted.data[0][currentPcaData.y] * currentPcaData.flipX).toFixed(6))], mode: 'markers+text', type: 'scatter', name: inputName, text: [inputName],  marker: { size: 5 },textfont: {family:'Arial', size: 11, color: '#ff0000'}});
      }
      else {
        this.inputHasError = true;
      };
    },
    resetAll: function () {
      for (let item of this.pcaData) {
        item.traces = item.traces.slice(0, item.tracesCount);
        item.layout = JSON.parse(item.initialLayout);
        for (let trace of item.traces) {
          delete trace.visible;
          delete trace.selectedpoints;
        }
      }
      this.inputValue = '';
      this.plotPCA(0);
    }
  },
  created: function () {
    let i, j;
    const dummyCoordinates = Array(13);
    for (i = 0; i < 13; i++) {
      dummyCoordinates[i] = Array(13);
      for (j = 0; j < 13; j++) {
        dummyCoordinates[i][j] = Math.random();
      }
    }
    for (let item of this.pcaData) {
      item.tracesCount = item.traces.length;
      item.initialLayout = JSON.stringify(item.layout);
      item.mlpca = new ML.PCA(dummyCoordinates);
      item.mlpca.S = item.mlpcaS;
      item.mlpca.means = item.mlpcaMeans;
      item.mlpca.center = item.mlpcaCenter;
      item.mlpca.scale = item.mlpcaScale;
      for (i = 0; i < 13; i++) {
        for (j = 0; j < 13; j++) {
          item.mlpca.U.data[i][j] = item.mlpcaUdata[i][j];
        }
      }
    }
  },
  mounted: function () {
    this.plotPCA(0);
  }
})
